---
import { SITE, BLOG } from '~/config.mjs';

import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Headline from '~/components/blog/Headline.astro';
import Pagination from '~/components/blog/Pagination.astro';

import { fetchPosts } from '~/utils/blog';
import { BLOG_BASE } from '~/utils/permalinks';

export async function getStaticPaths({ paginate }) {
  if (BLOG?.disabled || BLOG?.list?.disabled) return [];
  return paginate(await fetchPosts(), {
    params: { blog: BLOG_BASE || undefined },
    pageSize: BLOG.postsPerPage,
  });
}

const { page } = Astro.props;
const currentPage = page.currentPage ?? 1;

const meta = {
  title: `Blog${currentPage > 1 ? ` â€” Page ${currentPage}` : ''}`,
  description: SITE.description,
  noindex: BLOG?.list?.noindex || currentPage > 1,
  ogType: 'blog',
};
-----------
import { createEffect, onCleanup } from 'solid-js';

  let mediaRecorder;
  let recordedChunks = [];

  let isRecording = false;
  let isStopped = false;
  let isPlaying = false;

  const startRecording = () => {
    isRecording = true;
    isStopped = false;
    isPlaying = false;

    mediaRecorder.start();
  };

  const stopRecording = () => {
    isRecording = false;
    isStopped = true;
    isPlaying = false;

    mediaRecorder.stop();
  };

  const playRecording = () => {
    isRecording = false;
    isStopped = false;
    isPlaying = true;

    audioPlayer.play();
  };

  onCleanup(() => {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      mediaRecorder.stop();
    }
  });

  $: {
    recordButton.disabled = isRecording;
    stopButton.disabled = !isRecording && !recordedChunks.length;
    playButton.disabled = !recordedChunks.length || isRecording || isStopped;
    audioPlayer.src = recordedChunks.length ? URL.createObjectURL(new Blob(recordedChunks, { type: 'audio/webm' })) : '';
  }

  createEffect(() => {
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then((stream) => {
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = (event) => {
          recordedChunks.push(event.data);
        };

        mediaRecorder.onstop = () => {
          if (!isPlaying) {
            audioPlayer.src = URL.createObjectURL(new Blob(recordedChunks, { type: 'audio/webm' }));
          }

          recordedChunks = [];
        };
      })
      .catch((err) => {
        console.log('The following error occurred: ' + err);
      });
  });

---

<Layout {meta}>
  <section class="px-6 sm:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
    <Headline
      subtitle="A statically generated blog example with news, tutorials, resources and other interesting content related to AstroWind"
    >
      The Blog
    </Headline>
    <BlogList posts={page.data} />
    <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
  </section>
</Layout>
